name: Deploy PowerSync Sync Rules

on:
  push:
    branches: [main, develop]
    paths: ['powersync/sync-rules.yaml', '.github/workflows/deploy-powersync-rules.yml']
  pull_request:
    branches: [main, develop]
    paths: ['powersync/sync-rules.yaml']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod
        - both

env:
  NODE_VERSION: '20'

jobs:
  # Job 1: Validate sync rules
  validate:
    name: Validate Sync Rules
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Validate sync rules syntax
        run: |
          # Basic YAML syntax validation
          python -c "import yaml; yaml.safe_load(open('powersync/sync-rules.yaml'))"
          echo "✅ Sync rules YAML syntax is valid"

      - name: Verify schema is in sync with sync rules
        env:
          AUTH_TOKEN: ${{ secrets.POWERSYNC_API_TOKEN }}
          ORG_ID: ${{ secrets.POWERSYNC_ORG_ID }}
          PROJECT_ID: ${{ secrets.POWERSYNC_PROJECT_ID }}
          INSTANCE_ID: ${{ secrets.POWERSYNC_DEV_INSTANCE_ID }}
        run: |
          echo "🔍 Checking if committed schema matches sync rules..."
          npm run powersync:verify-schema
          echo "✅ Schema verification completed"

      - name: Validate sync rules against dev instance
        env:
          AUTH_TOKEN: ${{ secrets.POWERSYNC_API_TOKEN }}
          ORG_ID: ${{ secrets.POWERSYNC_ORG_ID }}
          PROJECT_ID: ${{ secrets.POWERSYNC_PROJECT_ID }}
          INSTANCE_ID: ${{ secrets.POWERSYNC_DEV_INSTANCE_ID }}
        run: |
          npx powersync instance sync-rules validate -f powersync/sync-rules.yaml
          echo "✅ Sync rules validated against dev instance"

  # Job 2: Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: validate
    if: |
      (github.ref == 'refs/heads/develop' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.environment == 'dev' || github.event.inputs.environment == 'both'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Deploy sync rules to dev
        env:
          AUTH_TOKEN: ${{ secrets.POWERSYNC_API_TOKEN }}
          ORG_ID: ${{ secrets.POWERSYNC_ORG_ID }}
          PROJECT_ID: ${{ secrets.POWERSYNC_PROJECT_ID }}
          INSTANCE_ID: ${{ secrets.POWERSYNC_DEV_INSTANCE_ID }}
        run: |
          echo "🚀 Deploying sync rules to development environment..."
          echo "🔧 Debug: Environment variables"
          echo "  PROJECT_ID: ${PROJECT_ID:0:8}..."
          echo "  ORG_ID: ${ORG_ID:0:8}..."
          echo "  INSTANCE_ID: ${INSTANCE_ID:0:8}..."
          echo "  AUTH_TOKEN: ${AUTH_TOKEN:0:8}..."
          
          echo "📄 Validating sync rules file exists..."
          if [ ! -f "powersync/sync-rules.yaml" ]; then
            echo "❌ Sync rules file not found!"
            exit 1
          fi
          
          echo "📋 Sync rules file content:"
          head -10 powersync/sync-rules.yaml
          
          echo "🚀 Attempting deployment..."
          set -x
          npx powersync instance sync-rules deploy -f powersync/sync-rules.yaml --skipConfirmation --verbose
          set +x
          echo "✅ Sync rules deployed to development successfully"

      - name: Post-deployment validation
        env:
          AUTH_TOKEN: ${{ secrets.POWERSYNC_API_TOKEN }}
          ORG_ID: ${{ secrets.POWERSYNC_ORG_ID }}
          PROJECT_ID: ${{ secrets.POWERSYNC_PROJECT_ID }}
          INSTANCE_ID: ${{ secrets.POWERSYNC_DEV_INSTANCE_ID }}
        run: |
          echo "🔍 Validating deployed sync rules..."
          npx powersync instance sync-rules validate -f powersync/sync-rules.yaml
          echo "✅ Post-deployment validation completed"

  # Job 3: Deploy to Production  
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, deploy-dev]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.environment == 'prod' || github.event.inputs.environment == 'both'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Deploy sync rules to production
        env:
          AUTH_TOKEN: ${{ secrets.POWERSYNC_API_TOKEN }}
          ORG_ID: ${{ secrets.POWERSYNC_ORG_ID }}
          PROJECT_ID: ${{ secrets.POWERSYNC_PROJECT_ID }}
          INSTANCE_ID: ${{ secrets.POWERSYNC_PROD_INSTANCE_ID }}
        run: |
          echo "🚀 Deploying sync rules to production environment..."
          npx powersync instance sync-rules deploy -f powersync/sync-rules.yaml --skipConfirmation
          echo "✅ Sync rules deployed to production successfully"

      - name: Post-deployment validation
        env:
          AUTH_TOKEN: ${{ secrets.POWERSYNC_API_TOKEN }}
          ORG_ID: ${{ secrets.POWERSYNC_ORG_ID }}
          PROJECT_ID: ${{ secrets.POWERSYNC_PROJECT_ID }}
          INSTANCE_ID: ${{ secrets.POWERSYNC_PROD_INSTANCE_ID }}
        run: |
          echo "🔍 Validating deployed sync rules..."
          npx powersync instance sync-rules validate -f powersync/sync-rules.yaml
          echo "✅ Post-deployment validation completed"

  # Job 4: Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "## PowerSync Sync Rules Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy-dev.result }}" == "success" ]]; then
            echo "✅ **Development**: Deployed successfully" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-dev.result }}" == "skipped" ]]; then
            echo "⏭️ **Development**: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Development**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.deploy-prod.result }}" == "success" ]]; then
            echo "✅ **Production**: Deployed successfully" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-prod.result }}" == "skipped" ]]; then
            echo "⏭️ **Production**: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Production**: Failed" >> $GITHUB_STEP_SUMMARY
          fi 