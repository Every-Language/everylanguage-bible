name: CI Pipeline

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  CACHE_DEPENDENCY_PATH: package-lock.json

jobs:
  # Job 1: Code Quality & Tests (Combined for efficiency)
  quality-and-tests:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Install dependencies
        run: npm ci

      - name: ESLint
        run: npm run lint

      - name: Prettier check
        run: npm run format:check

      - name: TypeScript check
        run: npm run type-check

      - name: Run tests
        run: npm test -- --coverage --watchAll=false --passWithNoTests

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: success()
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Job 2: Expo Validation (Managed Workflow)
  expo-validation:
    name: Expo Configuration Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Install dependencies
        run: npm ci

      - name: Expo doctor
        run: npx expo-doctor

      - name: Validate Expo configuration
        run: npx expo config --type introspect

      - name: Check for managed workflow compatibility
        run: |
          # Ensure no native folders exist
          if [ -d "android" ] || [ -d "ios" ]; then
            echo "‚ùå Native folders detected - should not exist in managed workflow"
            exit 1
          fi
          echo "‚úÖ Managed workflow validated"

  # Job 3: PowerSync Schema Validation (NEW)
  powersync-schema-check:
    name: PowerSync Schema Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch more history for better file change detection
          fetch-depth: 0

      - name: Check for PowerSync file changes
        id: powersync-changes
        run: |
          if git diff --name-only ${{ github.event.before }}..${{ github.sha }} | grep -E "(powersync/sync-rules\.yaml|powersync/AppSchema\.ts)" > /dev/null; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "PowerSync related files changed, running validation..."
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No PowerSync files changed, skipping validation..."
          fi

      - name: Setup Node.js
        if: steps.powersync-changes.outputs.changes == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Install dependencies
        if: steps.powersync-changes.outputs.changes == 'true'
        run: npm ci

      - name: Verify PowerSync schema consistency
        if: steps.powersync-changes.outputs.changes == 'true'
        env:
          AUTH_TOKEN: ${{ secrets.POWERSYNC_API_TOKEN }}
          ORG_ID: ${{ secrets.POWERSYNC_ORG_ID }}
          PROJECT_ID: ${{ secrets.POWERSYNC_PROJECT_ID }}
        run: |
          echo "üîç Verifying PowerSync schema is consistent with sync rules..."
          npm run powersync:verify-schema
          echo "‚úÖ PowerSync schema verification passed"

      - name: Check for uncommitted schema changes
        if: steps.powersync-changes.outputs.changes == 'true'
        env:
          AUTH_TOKEN: ${{ secrets.POWERSYNC_API_TOKEN }}
          ORG_ID: ${{ secrets.POWERSYNC_ORG_ID }}
          PROJECT_ID: ${{ secrets.POWERSYNC_PROJECT_ID }}
        run: |
          echo "üîÑ Generating fresh schema to compare..."
          npm run powersync:generate-schema
          
          if git diff --exit-code powersync/AppSchema.ts; then
            echo "‚úÖ No uncommitted schema changes detected"
          else
            echo "‚ùå Schema file has uncommitted changes after generation"
            echo ""
            echo "The committed schema differs from what would be generated."
            echo "Please run 'npm run powersync:generate-schema' and commit the changes."
            exit 1
          fi 